Restart of English language-learning. July 2021
===============================================
run-1 -- attempt to have a perfect run-through of everything.


Databases in the `~/data` directory
===================================

* run-1-en_pairs-tranche-1.rdb -- guten-tranche-1 only.
* run-1-en_pairs-tranche-12.rdb -- tranche 1 and 2
* run-1-en_pairs-tranche-123.rdb -- tranche 1, 2 and 3
* run-1-en_pairs-tranche-1234.rdb -- tranche 1-4
* run-1-en_pairs-tranche-12345.rdb -- tranche 1-5

All of the above include the MI marginals for word-pairs.

* r5-prs1-trim-1-1-1.rdb
* r5-prs1-trim-5-5-2.rdb

The above pairs files, but trimmed. Created by scripts in run-5 so
as not to pollute the historical record in this directory.

* run-1-en_mpg-tranche-1.rdb
* run-1-en_mpg-tranche-12.rdb
* run-1-en_mpg-tranche-123.rdb
* run-1-en_mpg-tranche-1234.rdb
* run-1-en_mpg-tranche-12345.rdb -- Missing tranche 4,5

Above have mpg parsing data in them. The last file is incomplete.
They appear to have all word-pair data in them, including word-pair
marginals.  They do NOT have support marginals in them.  They do NOT
have MM^T data in them.  (Here, M is the word-disjunct matrix).
Note that MM^T rquires support to be computed as a pre-req.  Support
and MM^T are added below:

* run-1-marg-tranche-12.rdb
* run-1-marg-tranche-123.rdb
* run-1-marg-tranche-1234.rdb

Above contain support marginals for (word,disjunct) pairs. They also
contain MM^T data. They also contain word-pairs and word-pair marginals.
Note that ther are words that appear in (word,disjunct) pairs that do
NOT appear in (word,word) pairs. I think this is due to broken ingestion
routines that fail to escape quotes correctly. I think these are trimmed
during trimming below, but have not actually checked.

* run-1-t12-trim-1-1-1.rdb
* run-1-t1234-trim-1-1-1.rdb

Trimmed to remove csets whose words, disjuncts and sections that have
a count of 1.  Trimming experiments were done in run-4; this is the
application of what was learned to the "master copy" datasets here.
See notes below on how to trim.

The above include MM^T marginals (these are recomputed after trimming),
and are thus ready for clustering.  The above include word-pairs too.
The word-pair marginals and word-pair MI have been recomputed after
trimming.

Upon further exploration, the above trims are not deep enough: we need to
trim words, disjuncts with a support of 1.  Many disjuncts appear on just
one word.  These seem to be junk, and should be removed.


Notes:
======

Pair-counting
-------------
tranche1 appears to be 3028 files
... seems that SSD is maybe 2x faster than spinning disk.

-----------------------------
tranche-2  is 4500 files -- the submitter ran at
real    792m5.161s
user    6m42.704s
sys     3m2.937s

so 10.56 seconds elapsed wait per file. Ouch.

virt/res RAM is 12.9 11.2GB  and 3085:20 runtime, so 41.1 seconds
CPU/file.  So this is running with 4 cores. Past experience suggests
most of this is actually Rocks doing stuff.

(ListLink . 6921181)
(EvaluationLink . 6921181)
(WordNode . 79348)

scheme@(en-pairs)> (display (monitor-storage storage-node))
Connected to `rocks:///home/ubuntu/data//en_pairs.rdb`
Database contents:
  Next aid: 29287757
  Atoms/Links/Nodes a@: 29287756 l@: 29145610 n@: 142126
  Keys/Incoming/Hash k@: 14714945 i@: 58282073 h@: 0

2053120 run-1-en_pairs-tranche-12.rdb -- 2GB

So .. 72 Bytes/atom ! Wow!

---------------------------
tranche-3  has 5711 files
processed in:
real    1863m46.768s -- so 31 hours wall-clock.
user    9m3.785s
sys     4m3.325s

process is using 30GB RAM at conclusion.
7985:17 mm:ss runtime, so about 133 cpu-hours.

(gc-time-taken . 31026312786171) total of 31026 seconds = 517 min
(heap-total-allocated . 2648643234624) = 2648 GB. outrageous.
(gc-times .  500306))

(ListLink . 18389495)
(EvaluationLink . 18389495)
(WordNode . 242910)

 du -s en_pairs.rdb
3601356 run-1-en_pairs-tranche-123.rdb - 3.5GB

Next aid: 56675645

-------------------------
tranche 4
cogserver segfaulted with 4810 articles remaining.
restart, with unlimited core size...
crash again with 3539 articles remaining Oh, well-known LG patch #1206

initial aid=76425718

4754676 run-1-en_pairs-tranche-1234.rdb
-------------------------
tranche 5

ingestion of articles:
real    2438m9.787s -- so 41 hours wall-clock time.
user    12m43.386s
sys     5m51.068s

process is using 37GB RAM at conclusion.
11944:03 mm:ss runtime, so about 200 cpu-hours.

(gc-time-taken . 70893060058413)
(heap-total-allocated . 3542955891120)
(gc-times .  566691)

(ListLink . 22982070)
(EvaluationLink . 22982070)
(WordNode . 278963)

Rocks: initial aid=104150297

du -s
6590776 run-1-en_pairs-tranche-12345.rdb -- 6.6 GBytes

-------------------------

Computing word-pair MI.
tranche-1:
Elapsed time to load ANY-link pairs: 577 secs
Support: found num left= 104879 num right= 105701 in 283 secs
Finished left norm marginals in 402 secs
Finished right norm marginals in 396 secs
Done with wild-card count N(x,*) and N(*,y) in 807 secs
Done computing 9797694 pair frequencies in 508 secs
Done computing 9797694 pair MI's in 2079 secs
Finished left entropy subtotals in 410 secs
Finished right entropy subtotals in 407 secs
Finished left MI subtotals in 404 secs
Finished right MI subtotals in 414 secs
Finished with MI computations; this took  1.51 hours.
Rows: 104879 Columns: 105701
Sparsity (-log_2): 10.144
Avg obs per pair: 27.449
Entropy Total: 17.827   Left: 9.7963   Right: 9.5884
Total MI: 1.5572

tranche-2:
Finished with MI computations; this took 2.185 hours.
Rows: 140140 Columns: 142101
Sparsity (-log_2): 10.416
Avg obs per pair: 33.804
Entropy Total: 17.889   Left: 9.8102   Right: 9.5463
Total MI: 1.4677

tranche-3
Finished with MI computations; this took 4.428 hours.
Rows: 304085 Columns: 306920
Sparsity (-log_2): 11.693
Avg obs per pair: 34.966
Entropy Total: 18.378   Left: 10.069   Right: 9.8321
Total MI: 1.5227

tranche-4
Finished with MI computations; this took 6.144 hours.
Rows: 397229 Columns: 402896
Sparsity (-log_2): 12.040
Avg obs per pair: 37.660
Entropy Total: 18.503   Left: 10.109   Right: 9.8801
Total MI: 1.4863

tranche-5
Finished with MI computations; this took 9.248 hours.
Rows: 531345 Columns: 538513
Sparsity (-log_2): 12.431
Avg obs per pair: 40.360
Entropy Total: 18.631   Left: 10.148   Right: 9.9265
Total MI: 1.4431

=========================================
MPG processing.

run-1-en_mpg-tranche-1.rdb -- done, looks good, I guess.
run-1-en_mpg-tranche-12.rdb -- done, looks good, I guess.
run-1-en_mpg-tranche-123.rdb -- done, looks good, I guess.
run-1-en_mpg-tranche-1234.rdb -- done, looks good, I guess.


MPG for tranche 12345: load each of the prior tranches and then restart:
start with tranche-1:
reported time to load pairs: 6488 sec
takes 93.1 GB to load word pairs. MPG of tranche 1 goes up to 105.6 GB
So delta = 12.5GB extra
wall-clock time of 408 mins. = 6.8 hours
cpu time of 3155 mins =  52.6 hours

next tranche-2:
reported time to load pairs: 7397 sec
cpu time to load pairs = 126:01 mm:ss = 7560 sec
tranche 2 is then goes up to 103.7 GB
so delta = 10.6GB extra
wall-clock time of 260m29.689s = 4.3 hrs
cputime = 2061:02 = 34.3 hours

next tranche-3
Elapsed time to load ANY-link pairs: 7235 secs
tranche-3 RAM 116.2 GB so delta = 23.1 GB
wall clocl     816m13.339s = 13.6 hours
cpu time = 6095:27 = 101.58 hours

next tranche-4
The above took so long, and used so much RAM, that I don't want to
start this. So we conclude:

MPG for tranche-12345 has had tranche 1,2,3 MPG-parsed, but not 4,5

The right thing would be to compute the support marginals, trim, and
then finish MPG parsing.


Support
=======
Seems like some of the MPG tranche-1,2,3,4 files may have had support
computed, but not all of them. Confusing situation.  (Neither
`run-1-en_mpg-tranche-1234.rdb` nor `run-1-en_mpg-tranche-123.rdb`
have support in them.)

Support computed as follows:

	(define pca (make-pseudo-cset-api))
	(define psa (add-pair-stars pca))
	(psa 'fetch-pairs)
	((add-support-compute psa) 'cache-all)
	((make-store psa) 'store-all)


MM^T and Support
================
Best to also compute MM^T too.  Like so:

	(define pca (make-pseudo-cset-api))
	(define psa (add-pair-stars pca))
	(psa 'fetch-pairs)
	((add-support-compute psa) 'cache-all)
	((batch-transpose psa) 'mmt-marginals)
	(cog-barrier storage-node)

run-1-marg-tranche-1234
-----------------------
 'fetch-pairs: Elapsed time to load csets: 5807 secs
 Total 78660479 Atoms (count-all) and 59.5 GB RSS
 (Connector . 951753)
 (ConnectorSeq . 36562917)
 (Section . 40648096)
 (WordNode . 497690)

 Finished left norm marginals in 17161 secs
 Finished left totals in 2599 secs
 Finished right norm marginals in 1568 secs
 Done storing 36562917 left-wilds in 12295 secs
 Done storing 40648095 pairs in 6133 secs

run-1-marg-tranche-123
----------------------
 Elapsed time to load csets: 3844 secs  (approx 50 GB RSS)
 Finished left norm marginals in 10165 secs
 Finished left totals in 976 secs
 Finished right norm marginals in 1131 secs
 Finished right totals in 12 secs
 Finished mmt norm marginals in 2908 secs (RSS of 71.5GB)
 Done storing 25698949 left-wilds in 8385 secs

run-1-marg-tranche-1
--------------------
 Elapsed time to load csets: 823 secs (RSS of 12.1 GB)
 Finished left norm marginals in 17197 secs
 Finished left totals in 6932 secs
 Finished right norm marginals in 360 secs
 Finished right totals in 8 secs
 Finished mmt norm marginals in 1443 secs
 Done storing 7470276 left-wilds in 2182 secs

Wow! why did the marginals take just as long as the 1234 job, a much
larger job above? Was it cause I was running two jobs at once, and
the CPU memory controller was overwhelmed by both at once? Oof!





Trimming
========
Turns out that (word,disjunct) with a count of 1 are garbage, and take
up 90% of the total file. Trimming these away offers a huge space
savings. Experimental details of trimming are in `run-4`.  Trim as
follows:

(define (iter-trim a b c)
	(define pca (make-pseudo-cset-api))
	(define psa (add-pair-stars pca))
	(subtotal-trim psa a b c)
	(trim-linkage psa)
	(set! pca (make-pseudo-cset-api))
	(set! psa (add-pair-stars pca))
	((add-support-compute psa) 'cache-all)
	(print-matrix-summary-report psa)
	(inexact->exact (round ((add-support-api psa) 'total-support-left)))
)

Run this 6-8 times:
(iter-trim 1 1 1)
(iter-trim 1 1 1)
(iter-trim 1 1 1)
(iter-trim 1 1 1)
(iter-trim 1 1 1)

((make-store psa) 'store-wildcards) ; else the support will be lost!

This invalidates the (word,disjunct) marginals. These need to be
recomputed:

   ((batch-transpose psa) 'mmt-marginals)
   (print-matrix-summary-report psa)

Issues: the above works great for trimming word-disjunct pairs.

However, the datafile includes words that appear in word-pairs, that
never appeared in word-disjunct pairs. These remain in the datafile,
as they never had the opportunity to be trimmed. If we want consistent
word-disjunct and word-word pairs, we need to trim these.  Do this as
follows:

	(define pca (make-pseudo-cset-api))
	(define psa (add-pair-stars pca))
	(psa 'fetch-pairs)
	(load-atoms-of-type 'WordNode)
	(for-each
		(lambda (base)
			(if (and (cog-atom? base)
					(equal? 0 (cog-incoming-size-by-type base 'Section)))
				(cog-delete-recursive! base)))
		(cog-get-atoms 'WordNode))

This invalidates the (word,word) marginals, so these need to be
recomputed.  Recompute by saying

   (define ala (make-any-link-api))
   (define als (add-pair-stars ala))
   (als 'fetch-pairs)
   (batch-all-pair-mi als)

run-1-t1234-trim-1-1-1
----------------------
Times:
 (als 'fetch-pairs)
 Elapsed time to load ANY-link pairs: 3149 secs
 (batch-all-pair-mi als)
 Finished with MI computations; this took 4.249 hours.


run-1-t123-trim-1-1-1
---------------------
first pass:
 Trimmed left basis in 4551 seconds.
 Trimmed right basis in 37298 seconds.
 Trimmed all pairs in 1871 seconds.
 Trimmed left basis in 3 seconds.


------- the end -------
