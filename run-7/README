
Run-7 -- Explore individual merges
----------------------------------
Sept 2021

Starting point is to copy data file `r6-similarity-tsup.rdb` which itself is a
copy of `run-1-t1234-tsup-1-1-1.rdb`.  The later trims everything with to have
a support of more than 1.  The former contains MI similarity for the top-ranked
1200 words.


(define pca (make-pseudo-cset-api))
(define pcs (add-pair-stars pca))
(define sup (add-support-api pcs))
(define smi (add-similarity-api pcs #f "mi"))

(pcs 'fetch-pairs)
(smi 'fetch-pairs) ;;; same as (load-atoms-of-type 'Similarity)

(define ol2 (/ 1.0 (log 2.0)))
(define (log2 x)
   (if (< 0 x) (* (log x) ol2) (- (inf))))

(define trp (add-transpose-api pcs))
(define tot-mmt (trp 'total-mmt-count))
(define ltot-mmt (log2 tot-mmt))

; This is log_2 p(w) = log_2 \sum_d p(w,d) p(d,*)
(define (marg-mmt WRD)
   (- (log2 (trp 'mmt-count WRD)) ltot-mmt))

; This is MI(a,b) -0.5(p(a) + p(b)) and has that funky square-root in it.
(define (common-MI WA WB)
   (+ (cog-value-ref (smi 'pair-count WA WB) 0)
      (* 0.5 (+ (marg-mmt WA) (marg-mmt WB)))))

(define wa (Word "is"))
(define wb (Word "was"))

; Examine individual supports and counts
(sup 'right-support wa)
(sup 'right-support wb)
(sup 'right-count wa)
(sup 'right-count wb)


; Compute the common support
(define sim (add-similarity-compute pcs))
(sim 'right-overlap wa wb)

(define (either x y) (if (or (< 0.0 x) (< 0.0 y)) 1.0 0.0))
(define (both x y) (if (and (< 0.0 x) (< 0.0 y)) 1.0 0.0))
(define either-obj (add-support-compute (add-tuple-math pcs either)))
(define both-obj (add-support-compute (add-tuple-math pcs both)))

(either-obj 'right-support (list wa wb))
(both-obj 'right-support (list wa wb))

; ------------------------------
(define (none WA WB) 0.0)

(define wa (Word "is"))
(define wb (Word "was"))

(define is-was ((add-cluster-gram pcs) 'make-cluster wa wb))
; merge but not connectors
(start-cluster pcs is-was wa wb none 0 #f)


(define cnt 0)
(define (remove-zero WRD)
	(for-each
		(lambda (ITEM)
			(when (and (cog-atom? ITEM) (is-zero? (pcs 'get-count ITEM)))
				(cog-delete! ITEM)
				(set! cnt (+ 1 cnt))))
		(pcs 'right-stars WRD)))

(length (pcs 'right-stars  wa))


(define atc (add-transpose-compute pcs))
(atc 'set-mmt-marginals WRD)
(atc 'set-mmt-totals)
	

(define (set-mmt-totals)
         (let ((mmt-sup (atc 'total-mmt-support))
               (mmt-cnt (atc 'total-mmt-count))
               (mmt-len (atc 'total-mmt-length))
               (mmt-amp (atc 'total-mmt-amplitude)))
            (trp 'set-mmt-totals mmt-sup mmt-cnt mmt-len mmt-amp)))

(define asm (add-symmetric-mi-compute pcs))
(asm 'mmt-fmi wa wb)

(define e (make-elapsed-secs)) (set-mmt-totals) (e)

(define cnt 0)
(define (verify)
	(for-each
		(lambda (ITEM)
			(when 
				; (equal? 0 (cog-incoming-size-by-type ITEM 'Section))
				; (equal? 0 (sup 'left-count ITEM))
				(equal? 0 (sup 'left-support ITEM))
				(set! cnt (+ 1 cnt))))
		(pcs 'right-basis)))

(define (verify)
	(for-each
		(lambda (ITEM)
			(when 
				(equal? 0 (trp 'mmt-count ITEM))
				(set! cnt (+ 1 cnt))))
		(pcs 'left-basis)))

(define miss (atoms-subtract (cog-get-atoms 'ConnectorSeq) (pcs 'right-basis)))


(cog-incoming-size-by-type (AnyNode "cset-disjunct") 'List)

;===============================
; Same as above, but with shape merges.

(use-modules (srfi srfi-1))
(define pca (make-pseudo-cset-api))
(define pcs (add-pair-stars pca))
(define sha (add-covering-sections pcs))
(sha 'fetch-pairs)
(define e (make-elapsed-secs)) (sha 'explode-sections) (e)

(define wa (Word "is"))
(define wb (Word "was"))

(length (filter (lambda (DJ) (equal? (cog-type DJ) 'ShapeLink)) (sha 'right-duals wb)))
(length (filter (lambda (DJ) (equal? (cog-type DJ) 'ConnectorSeq)) (sha 'right-duals wb)))

(define sup (add-support-api sha))

(fold + 0 (map get-count (filter (lambda (SEC) 
		(equal? (cog-type (gdr SEC)) 'ConnectorSeq)) (sha 'right-stars wb))))

(fold + 0 (map get-count (filter (lambda (SEC) 
		(equal? (cog-type (gdr SEC)) 'ShapeLink)) (sha 'right-stars wb))))

(define (either x y) (if (or (< 0.0 x) (< 0.0 y)) 1.0 0.0))
(define (both x y) (if (and (< 0.0 x) (< 0.0 y)) 1.0 0.0))
(define either-obj (add-support-compute (add-tuple-math sha either)))
(define both-obj (add-support-compute (add-tuple-math sha both)))

(either-obj 'right-support (list wa wb))
(both-obj 'right-support (list wa wb))


(define (none WA WB) 0.0)
(define is-was ((add-cluster-gram pcs) 'make-cluster wa wb))
; merge connectors
(start-cluster sha is-was wa wb none 0 #t)

; ======================================
; Cluster expansions

(define (comi sa sb) (common-MI (Word sa) (Word sb)))
(define (mimi sa sb) (smi 'pair-count (Word sa) (Word sb)))

(define wa (Word "It"))
(define wb (Word "He"))

(define clus ((add-cluster-gram pcs) 'make-cluster wa wb))
; merge but not connectors
(define (none WA WB) 0.0)
(start-cluster pcs clus wa wb none 0 #f)

; Recompute MMT etc.
(define atc (add-transpose-compute pcs))

(atc 'set-mmt-marginals wa)
(atc 'set-mmt-marginals wb)
(atc 'set-mmt-marginals clus)
(atc 'set-mmt-totals)

(cog-value (Similarity wa wb) (Predicate "*-SimKey mi"))

(define asm (add-symmetric-mi-compute pcs))
(asm 'mmt-fmi wa wb)

(define (recomp-mi WA WB)
	(cog-set-value! (Similarity WA WB) (Predicate "*-SimKey mi")
		(FloatValue (asm 'mmt-fmi WA WB))))

(define (rest sa sb) (recomp-mi (Word sa) (Word sb)))

;---------
(define wa (Word "She"))
(merge-into-cluster pcs clus wa none 0 #f)

(define e (make-elapsed-secs)) (atc 'set-mmt-totals) (e)


The End
-------
