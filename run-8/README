
Run-8 -- Explore individual merges, w/ shapes and more of them.
---------------------------------------------------------------
Oct 2021

Starting point is to copy data file `r6-similarity-shape.rdb` which
itself is a copy of `run-1-t1234-tsup-1-1-1.rdb`.  The later trims
everything to have a support of more than 1.  The former contains
MI similarity for the top-ranked 1200 words using shapes.


(use-modules (srfi srfi-1))
(define pca (make-pseudo-cset-api))
(define pcs (add-pair-stars pca))
(define sha (add-covering-sections pcs))
(sha 'fetch-pairs)
(define e (make-elapsed-secs)) (sha 'explode-sections) (e)

(define sap (add-similarity-api sha #f "shape-mi"))
(sap 'fetch-pairs) ;;; same as (load-atoms-of-type 'Similarity)

(define asm (add-symmetric-mi-compute sha))

; =================================
; Create a sorted list -- just like in cliques.scm
; cut-n-paste code from there...

(prt-sorted-pairs 0)
common-MI= 15.818 .... <<-->> --
common-MI= 15.700 — <<-->> +
common-MI= 15.695 ; <<-->> ,
common-MI= 15.593 is <<-->> was
common-MI= 15.586 i <<-->> ii
common-MI= 15.565 and <<-->> but
common-MI= 15.469 . <<-->> ?
common-MI= 15.455 ! <<-->> ?
common-MI= 15.399 It <<-->> He
common-MI= 15.349 [ <<-->> +
common-MI= 14.756 ” <<-->> "
common-MI= 14.732 No <<-->> A
common-MI= 14.728 in <<-->> of
common-MI= 14.725 she <<-->> he
common-MI= 14.682 It <<-->> There
common-MI= 14.641 and <<-->> as
common-MI= 14.600 ! <<-->> .
common-MI= 14.574 ‘ <<-->> “
common-MI= 14.524 the <<-->> his
common-MI= 14.511 Footnote <<-->> Times.=

; =================================
; Get ready to merge.

; The fraction to merge -- zero.
(define (none WA WB) 0.0)

; When to merge -- always.
(define (always WA WB) #t)

; Recompute the support ... wait, this is done for us, already.
; Recompute the mmt ... this will be calleed for us, automatically.
(define atc (add-transpose-compute sha))
(define (store-mmt row)
   (store-atom (atc 'set-mmt-marginals row)))

(define mrg (make-merger sha always none 0 0 store-mmt #t))
(define mrg (make-merger (add-cluster-gram sha) always none 0 0 store-mmt #t))

; =================================
; Perform the merge.

(define mp (list-ref sorted-pairs 0))
(define wa (gar mp))
(define wb (gdr mp))

(define (setup-next N)
	(define mp (list-ref sorted-pairs N))
	(set! wa (gar mp))
	(set! wb (gdr mp))
	(format #t "Setup for merge of `~A` and `~A`\n"
		(cog-name wa) (cog-name wb)))

(define (do-merge WA WB)
	(format #t "Start merge of `~A` and `~A`\n"
		(cog-name WA) (cog-name WB))
	(define e (make-elapsed-secs))
	(define wclass (mrg 'merge-function WA WB))
	(format #t "Merged into `~A` in ~A secs\n" (cog-name wclass) (e))

	; Post merge, recompute the mmt total.
	(store-atom (atc 'set-mmt-totals))
	(format #t "Did the mmt totals in ~A secs\n" (e))
)

(setup-next 0)
Setup for merge of `....` and `--`
merge in 213 secons

(setup-next 1)
Setup for merge of `—` and `+`
Did the merge in 176 secs

(setup-next 2)
Start merge of `;` and `,`
Did the merge in 490 secs

(setup-next 3)
Setup for merge of `is` and `was`
Did the merge in 296 secs

(setup-next 4)
Setup for merge of `i` and `ii`
Did the merge in 172 secs

(setup-next 5)
Start merge of `and` and `but`
Merged into and but in 279 secs

(setup-next 6)
Setup for merge of `.` and `?`
Merged into . ? in 360 secs

(setup-next 7)
Setup for merge of `!` and `?`
Ahh and now we have to recompute similarities to see what's happening.



	(define (recomp-pair-sim WA WB)
xxx (store-atom
		(sap 'set-pair-similarity (FloatValue (asm 'mmt-fmi WA WB))))

	(define (recomp-all-sim WX)
		(define e (make-elapsed-secs))
		(define wrd-list (sim 'left-duals WX))
		(for-each
			(lambda (WRD) (recomp-pair-sim WRD WX))
			word-list)
		(format #t "Recomputed all ~D sims for ~A in ~A secs\n"
			(length word-list) (cog-name WX) (e))
	)

	; Is this actually needed?
	; We need to be selective with this, cause it takes so long.
	(recomp-all-sim WA)
	(recomp-all-sim WB)

)

(define wa (Word "is"))
(define wb (Word "was"))


The End
-------
