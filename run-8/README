
Run-8 -- Explore individual merges, w/ shapes and more of them.
---------------------------------------------------------------
Oct 2021

Starting point is to copy data file `r6-similarity-shape.rdb` which
itself is a copy of `run-1-t1234-tsup-1-1-1.rdb`.  The later trims
everything to have a support of more than 1.  The former contains
MI similarity for the top-ranked 1200 words using shapes.


(use-modules (srfi srfi-1))
(define pca (make-pseudo-cset-api))
(define pcs (add-pair-stars pca))
(define sha (add-covering-sections pcs))
(sha 'fetch-pairs)
(define e (make-elapsed-secs)) (sha 'explode-sections) (e)

(define sap (add-similarity-api sha #f "shape-mi"))
(sap 'fetch-pairs) ;;; same as (load-atoms-of-type 'Similarity)

(define asm (add-symmetric-mi-compute sha))

; =================================
; Create a sorted list -- just like in cliques.scm
; cut-n-paste code from there...

; =================================
; Get ready to merge.

; The fraction to merge -- zero.
(define (none WA WB) 0.0)

; When to merge -- always.
(define (always WA WB) #t)

; Recompute the support ... wait, this is done for us, already.
; Recompute the mmt ... this will be calleed for us, automatically.
(define atc (add-transpose-compute sha))
(define (store-mmt row)
   (store-atom (atc 'set-mmt-marginals row)))

(define mrg (make-merger sha always none 0 0 store-mmt #t))

; =================================
; Perform the merge.

(define (do-merge WA WB)
	(define wclass ((mrg 'merge-function) WA WB))

	; Post merge, recompute the mmt total.
	(define e (make-elapsed-secs))
	(store-atom (atc 'set-mmt-totals))
	(format #t "Did the mmt totals in ~A secs\n" (e))

	(define (recomp-pair-sim WA WB)
		(sap 'set-pair-similarity (FloatValue (asm 'mmt-fmi WA WB))))

	(define (recomp-all-sim WX)
		(define e (make-elapsed-secs))
		(define wrd-list (sim 'left-duals WX))
		(for-each
			(lambda (WRD) (recomp-pair-sim WRD WX))
			word-list)
		(format #t "Recomputed all ~D sims for ~A in ~A secs\n"
			(length word-list) (cog-name WX) (e))
	)

	; Is this actually needed?
	; We need to be selective with this, cause it takes so long.
	(recomp-all-sim WA)
	(recomp-all-sim WB)

)

(define wa (Word "is"))
(define wb (Word "was"))


The End
-------
