
Run-8 -- Explore individual merges, w/ shapes and more of them.
---------------------------------------------------------------
Oct 2021

Starting point is to copy data file `r6-similarity-shape.rdb` which
itself is a copy of `run-1-t1234-tsup-1-1-1.rdb`.  The later trims
everything to have a support of more than 1.  The former contains
MI similarity for the top-ranked 1200 words using shapes.

Results:
Everything seems to be working. This allowed a code review to happen,
a few bugs got fixed, and an outline for the next-gen merge algo
got created.  It's going to go into `agglo-rank.scm`.
So I think we're done here.


(use-modules (srfi srfi-1))
(define pca (make-pseudo-cset-api))
(define pcs (add-pair-stars pca))
(define sha (add-covering-sections pcs))
(sha 'fetch-pairs)
(define e (make-elapsed-secs)) (sha 'explode-sections) (e)

(define sap (add-similarity-api sha #f "shape-mi"))
(sap 'fetch-pairs) ;;; same as (load-atoms-of-type 'Similarity)

(define asm (add-symmetric-mi-compute sha))

; =================================
; Create a sorted list -- just like in cliques.scm
; cut-n-paste code from there...

(prt-sorted-pairs 0)
common-MI= 15.818 .... <<-->> --
common-MI= 15.700 — <<-->> +
common-MI= 15.695 ; <<-->> ,
common-MI= 15.593 is <<-->> was
common-MI= 15.586 i <<-->> ii
common-MI= 15.565 and <<-->> but
common-MI= 15.469 . <<-->> ?
common-MI= 15.455 ! <<-->> ?
common-MI= 15.399 It <<-->> He
common-MI= 15.349 [ <<-->> +
common-MI= 14.756 ” <<-->> "
common-MI= 14.732 No <<-->> A
common-MI= 14.728 in <<-->> of
common-MI= 14.725 she <<-->> he
common-MI= 14.682 It <<-->> There
common-MI= 14.641 and <<-->> as
common-MI= 14.600 ! <<-->> .
common-MI= 14.574 ‘ <<-->> “
common-MI= 14.524 the <<-->> his
common-MI= 14.511 Footnote <<-->> Times.=

; =================================
; Get ready to merge.

; The fraction to merge -- zero.
(define (none WA WB) 0.0)

; When to merge -- always.
(define (always WA WB) #t)

; Recompute the support ...
; What was done is not enough, we need to recompute the marginals
; on the disjuncts, too, to get N(*,d)
; Recompute the mmt ... this will be called for us, automatically.
(define psu (add-support-compute sha))
(define atc (add-transpose-compute sha))
(define (store-mmt WRD)
	(for-each
		(lambda (DJ) (store-atom (psu 'set-left-marginals DJ)))
		(sha 'right-duals WRD))
	(store-atom (psu 'set-right-marginals WRD))
   (store-atom (atc 'set-mmt-marginals WRD)))

(define mrg (make-merger (add-cluster-gram sha) always none 0 0 store-mmt #t))

; =================================
; Perform the merge.

(define mp (list-ref sorted-pairs 0))
(define wa (gar mp))
(define wb (gdr mp))

(define (setup-next N)
	(define mp (list-ref sorted-pairs N))
	(set! wa (gar mp))
	(set! wb (gdr mp))
	(when (equal? (cog-type wb) 'WordClassNode) ; swap.
		(set! wa (gdr mp))
		(set! wb (gar mp)))

	(format #t "Setup for merge of `~A` and `~A`\n"
		(cog-name wa) (cog-name wb)))

(define (do-merge WA WB)
	(format #t "Start merge of `~A` and `~A`\n"
		(cog-name WA) (cog-name WB))
	(define e (make-elapsed-secs))
	(define wclass (mrg 'merge-function WA WB))

	; Post merge, recompute the mmt total.
	(store-atom (atc 'set-mmt-totals))
	(format #t "Merged into `~A` in ~A secs\n" (cog-name wclass) (e))
)

(setup-next 0)
Setup for merge of `....` and `--`
merge in 213 secons

(setup-next 1)
Setup for merge of `—` and `+`
Did the merge in 176 secs

(setup-next 2)
Start merge of `;` and `,`
Did the merge in 490 secs

(setup-next 3)
Setup for merge of `is` and `was`
Did the merge in 296 secs

(setup-next 4)
Setup for merge of `i` and `ii`
Did the merge in 172 secs

(setup-next 5)
Start merge of `and` and `but`
Merged into and but in 279 secs

(setup-next 6)
Setup for merge of `.` and `?`
Merged into . ? in 360 secs

(setup-next 7)
Setup for merge of `!` and `?`
Ahh and now we have to recompute similarities to see what's happening.

(cog-get-atoms 'WordClass)

(define merged-words
	(concatenate
		(map (lambda (CLS)
				(map (lambda (MEMB) (cog-outgoing-atom MEMB 0))
						(cog-incoming-by-type CLS 'Member)))
			(cog-get-atoms 'WordClass))))

------------

wtf... OH, OK, N(*,d) was not being recomputed... fixed...

(for-each store-mmt merged-words)
(for-each store-mmt (cog-get-atoms 'WordClass))

------------
(define (recomp-pair-sim WA WB)
	(store-atom
		(sap 'set-pair-similarity
			(Similarity WA WB) (FloatValue (asm 'mmt-fmi WA WB)))))

(define (recomp-all-sim WX)
	(define e (make-elapsed-secs))
	(define wrd-list (sim 'left-duals WX))
	(define hi-list
		(filter (lambda (WRD) (< 8.0 (common-MI WRD WX)))
			wrd-list))

	(for-each
		(lambda (WRD) (recomp-pair-sim WRD WX))
		hi-list)
	(format #t "Recomputed ~3D hi-mi-sims for `~A` in ~A secs\n"
		(length hi-list) (cog-name WX) (e))
)

(for-each recomp-all-sim merged-words)

Recomputed   2 hi-mi-sims for `;` in 10 secs
Recomputed 137 hi-mi-sims for `,` in 893 secs
Recomputed  76 hi-mi-sims for `and` in 273 secs
Recomputed  44 hi-mi-sims for `but` in 36 secs
Recomputed  21 hi-mi-sims for `--` in 11 secs
Recomputed   3 hi-mi-sims for `....` in 0 secs
Recomputed 257 hi-mi-sims for `is` in 259 secs
Recomputed 265 hi-mi-sims for `was` in 393 secs
Recomputed  17 hi-mi-sims for `i` in 1 secs
Recomputed   3 hi-mi-sims for `ii` in 0 secs
Recomputed  81 hi-mi-sims for `.` in 469 secs
Recomputed  10 hi-mi-sims for `?` in 17 secs
Recomputed  15 hi-mi-sims for `+` in 4 secs
Recomputed  53 hi-mi-sims for `—` in 53 secs


(define (comp-all-cls-sim CLS)
	(define e (make-elapsed-secs))

	(for-each
		(lambda (WRD) (recomp-pair-sim WRD CLS))
		words-with-sims)
	(format #t "Computed ~4D sims for `~A` in ~A secs\n"
		(length words-with-sims) (cog-name CLS) (e))
)

(for-each comp-all-cls-sim (cog-get-atoms 'WordClass))

Computed 1200 sims for `; ,` in 1018 secs
Computed 1200 sims for `and but` in 443 secs
Computed 1200 sims for `.... --` in 141 secs
Computed 1200 sims for `is was` in 860 secs
Computed 1200 sims for `i ii` in 119 secs
Computed 1200 sims for `. ?` in 336 secs
Computed 1200 sims for `— +` in 120 secs



(define (comp-cls-cls-sim CLS)
	(define e (make-elapsed-secs))
	(define clist (cog-get-atoms 'WordClass))

	(for-each
		(lambda (WRD) (recomp-pair-sim WRD CLS))
		clist)
	(format #t "Computed ~4D sims for `~A` in ~A secs\n"
		(length clist) (cog-name CLS) (e))
)

(for-each comp-cls-cls-sim (cog-get-atoms 'WordClass))

Fast.

(for-each (lambda (CA)
	(for-each (lambda (CB)
		(format #t "`~A` -- `~A` comi= ~6F\n" (cog-name CA)
			(cog-name CB) (common-MI CA CB)))
		(cog-get-atoms 'WordClass)))
	(cog-get-atoms 'WordClass))

Looks OK

Recompute using tthe new values
(length (cog-get-atoms 'Similarity)) ;; 677039
(+ 668610 (* 7 1200) 49) ;; 677059

tot-mmt ; 133428839146.0   old value
(trp 'total-mmt-count) ;; 127451894354.0 new value

ltot-mmt ; 36.95727956632733  old value
(log2 tot-mmt)) ;;;  36.89116186046995 new value

guile> (prt-sorted-pairs 0)
common-MI= 16.115 ! <<-->> . ?          << cool!
common-MI= 15.941 i ii <<-->> iv        << cool!
common-MI= 15.600 as <<-->> and but     << ok sure!
common-MI= 15.530 i ii <<-->> iii       << yes!
common-MI= 15.432 It <<-->> He          << OK
common-MI= 15.404 for <<-->> and but    << sure
common-MI= 15.276 ' <<-->> .... --      << cool!
common-MI= 15.266 ###LEFT-WALL### <<-->> ; ,    << OK
common-MI= 15.205 .... -- <<-->> JANET    << nasty lets wait.
common-MI= 15.041 . ? <<-->> ....
common-MI= 14.980 ‐ <<-->> .... --
common-MI= 14.927 . ? <<-->> ; ,
common-MI= 14.845 i ii <<-->> v
common-MI= 14.789 ” <<-->> "
common-MI= 14.765 No <<-->> A
common-MI= 14.763 — + <<-->> –
common-MI= 14.761 in <<-->> of
common-MI= 14.758 she <<-->> he
common-MI= 14.739 \\\\\\\\\\\\\\\"I <<-->> .... --
common-MI= 14.735 had <<-->> is was

(setup-next 0)
Setup for merge of `. ?` and `!`
Merged into `. ?` in 177 secs

(setup-next 1)
Setup for merge of `i ii` and `iv`
Merged into `i ii` in 144 secs

(setup-next 2)
Setup for merge of `and but` and `as`
Merged into `and but` in 177 secs

(setup-next 3)
Setup for merge of `i ii` and `iii`
Merged into `i ii` in 146 secs

(setup-next 4)
Setup for merge of `It` and `He`
Merged into `It He` in 150 secs

(setup-next 5)
Setup for merge of `and but` and `for`
Oh, hang on .. we should recrank here.

; manual...
(define merged-words (list
	(Word "!")
	(Word "iv")
	(Word "as")
	(Word "iii")
	(Word "It")
	(Word "He")))

(define new-cls (list
	(WordClass ". ?")
	(WordClass "i ii")
	(WordClass "and but")
	(WordClass "It He")))

(for-each store-mmt merged-words)
(for-each store-mmt new-cls)

(for-each recomp-all-sim merged-words)
(for-each recomp-all-sim new-cls)
(for-each comp-all-cls-sim new-cls)

(for-each comp-cls-cls-sim (cog-get-atoms 'WordClass))

(define tot-mmt (trp 'total-mmt-count))
(define ltot-mmt (log2 tot-mmt))

(define all-sim-pairs (cog-get-atoms 'Similarity))
(define uniq-sims
   (filter (lambda (SIM) (not (equal? (gar SIM) (gdr SIM)))) all-sim-pairs))
(define hi-comi-sims
   (filter (lambda (SIM) (< 12.0 (common-MI (gar SIM) (gdr SIM)))) uniq-sims))
(define sorted-pairs
	(rank-pairs (lambda (SIM) (common-MI (gar SIM) (gdr SIM)))))

(prt-sorted-pairs 0)


common-MI= 15.682 There <<-->> It He   -- OK
common-MI= 15.650 She <<-->> It He     -- need redo but skip it
common-MI= 15.581 for <<-->> and but   -- sure
common-MI= 15.541 This <<-->> It He    -- another
common-MI= 15.318 i ii <<-->> v        -- good
common-MI= 15.283 . ? <<-->> ....      -- OK
common-MI= 15.276 ' <<-->> .... --     -- OK
common-MI= 15.262 ###LEFT-WALL### <<-->> ; ,   --Hmmm
common-MI= 15.205 .... -- <<-->> JANET    -- oh no!
common-MI= 15.016 had <<-->> is was     -- OK
common-MI= 14.980 ‐ <<-->> .... --      -- again recomps needed.
common-MI= 14.961 . ? <<-->> ; ,        -- Ohh!! First merge of classes!
common-MI= 14.842 that <<-->> and but   -- sure
common-MI= 14.786 ” <<-->> "            -- excellent
common-MI= 14.763 No <<-->> A           -- Meh
common-MI= 14.760 — + <<-->> –          -- good
common-MI= 14.759 has <<-->> is was     -- yep
common-MI= 14.759 in <<-->> of          -- OK
common-MI= 14.756 she <<-->> he         -- good
common-MI= 14.739 \\\\\\\\\\\\\\\"I <<-->> .... -- Meh

(define merged-words (list
	(Word "There")
	(Word "She")
	(Word "for")
	(Word "This")
	(Word "v")
	(Word "'")
	(Word "had")
	(Word "has")
	(Word "that")
	(Word "in")
	(Word "of")
	(Word "he")
	(Word "she")
	(Word "–")
	(Word "###LEFT-WALL###")
	(Word "....")))

(define new-cls (list
	(WordClass ".... --")
	(WordClass "; ,")
	(WordClass ". ?")
	(WordClass "i ii")
	(WordClass "and but")
	(WordClass "is was")
	(WordClass "in of")
	(WordClass "he she")
	(WordClass "— +")
	(WordClass "” \"")
	(WordClass "It He")))

(define new-cls (list
	(WordClass "in of")
	(WordClass "he she")
	(WordClass "” \""))

==================
Sanity checking

(define all-words (sha 'left-basis))
(for-each (lambda (WRD)
	(if (equal? (cog-type WRD) 'WordClassNode)
		(format #t "Bingo ~A\n" (cog-name WRD))))
	all-words)

(define cnt 0)
(for-each (lambda (WRD)
	(if (equal? 0 (sup 'right-support WRD))
		(set! cnt (+ 1 cnt))))
	all-words)




The End
-------
