
Run-9 -- Common-MI merge Development
------------------------------------
Oct 2021

Starting point is a copy of `run-1-t1234-tsup-1-1-1.rdb`.
Should be able to run merges on this. Right!?



(use-modules (srfi srfi-1))
(define pca (make-pseudo-cset-api))
(define pcs (add-pair-stars pca))
(define sha (add-covering-sections pcs))
(sha 'fetch-pairs)
(sha 'explode-sections)

(define bat (batch-transpose sha))
(bat 'mmt-marginals)

xxx not yet...
(define sap (add-similarity-api sha #f "shape-mi"))
(sap 'fetch-pairs) ;;; same as (load-atoms-of-type 'Similarity)



OK Debug session
----------------
Whats up with supports?

(define sup (add-support-api sha))
(define all-words (sha 'left-basis))
(define cnt 0)
(for-each (lambda (WRD)
   (if (equal? 0 (sup 'right-support WRD))
      (set! cnt (+ 1 cnt))))
   all-words)

Answer: sha does not have supports, but pcs does.
We actually need supports on sha to get everything in tune.
Sigh

Marginal MI.  Go for it.
------------------------
(define trp (add-transpose-api sha))
(define tot-mmt (trp 'total-mmt-count)) ;; 133428839146.0
(define sup (add-support-api sha))
(define tcl (sup 'total-count-left)) ; 22942644.0

(log2 (/ tot-mmt (* tcl tcl))) ;; -11.945777087600217

Sanity check
------------
(define trp (add-transpose-api LLOBJ))
(define logtot-mmt (log2 (trp 'total-mmt-count)))
(define (marg-mmt WRD)
	(- (log2 (trp 'mmt-count WRD)) logtot-mmt))

(marg-mmt (Word "she")) ;; -8.132478192249291

(define smc (add-symmetric-mi-compute sha))
(log2 (smc 'mmt-marginal (Word "she"))) ; -8.132478192249287

(smc 'mmt-fmi (Word "she") (Word "he")) ; 3.717520907323397

(log2 (smc 'mmt-marginal (Word "he"))) ; -6.809712318531014

(* 0.5 (+ -8.132478192249287 -6.809712318531014)) ; -7.471095255390151

(* 0.5 11.945777087600217)  ; 5.972888543800108


OK Go for it, again
-------------------
(sap 'pair-count (Word "she") (Word "he"))

(length good-sims) ;; 1338

so out of 200*201/1 = 20K pairs, 1K have MI > 2 .. I guess that's allright

(ranked-mi-sim (Word "she") (Word "he"))

(define (prt-sorted-pairs LST N)
   (for-each
      (lambda (PR)
         (format #t "ranked-MI = ~6F MI = ~6F (`~A`, `~A`)\n"
            (ranked-mi-sim (gar PR) (gdr PR))
            (mi-sim (gar PR) (gdr PR))
            (cog-name (gar PR))
            (cog-name (gdr PR))))
      (drop (take LST (min (length LST) (+ N 20))) N)))


(smc 'mmt-fmi (Word "i") (Word "ii"))

(define (rank-of WRD)
	(list-index (lambda (W) (equal? WRD W)) ranked-words))

(define gsims
	(filter
		(lambda (SIM)
			(define WA (gar SIM))
			(define WB (gdr SIM))
			(and (< 6.0 (mi-sim WA WB)) (<= (mi-sim WA WB) 33.0)
				 (not (equal? WA WB))))
		all-sim-pairs))

(define rp (rank-pairs gsims
	(lambda (SIM) (ranked-mi-sim (gar SIM) (gdr SIM)))))



Data set construction
---------------------
(sha 'fetch-pairs)
Elapsed time to load csets: 175 secs
Elapsed time to load cross-sections: 0 seconds
(sha 'explode-sections)
Elapsed time to create shapes: 104 secs

(define bat (batch-transpose sha))
(bat 'mmt-marginals)
Finished left norm marginals in 3503 secs
Finished mmt norm marginals in 310 secs




The End
-------
