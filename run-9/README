
Run-9 -- Common-MI merge Development
------------------------------------
Oct 2021

Starting point is a copy of `run-1-t1234-tsup-1-1-1.rdb`.
Should be able to run merges on this. Right!?



(use-modules (srfi srfi-1))
(define pca (make-pseudo-cset-api))
(define agc (add-gram-class-api pca))
(define pcs (add-pair-stars agc))
(define sha (add-covering-sections pcs))
(sha 'fetch-pairs)
(sha 'explode-sections)

(define bat (batch-transpose sha))
(bat 'mmt-marginals)

xxx not yet...
(define sap (add-similarity-api sha #f "shape-mi"))
(sap 'fetch-pairs) ;;; same as (load-atoms-of-type 'Similarity)



OK Debug session
----------------
Whats up with supports?

(define sup (add-support-api sha))
(define all-words (sha 'left-basis))
(define cnt 0)
(for-each (lambda (WRD)
   (if (equal? 0 (sup 'right-support WRD))
      (set! cnt (+ 1 cnt))))
   all-words)

Answer: sha does not have supports, but pcs does.
We actually need supports on sha to get everything in tune.
Sigh

Marginal MI.  Go for it.
------------------------
(define trp (add-transpose-api sha))
(define tot-mmt (trp 'total-mmt-count)) ;; 133428839146.0
(define sup (add-support-api sha))
(define tcl (sup 'total-count-left)) ; 22942644.0

(log2 (/ tot-mmt (* tcl tcl))) ;; -11.945777087600217

Sanity check
------------
(define trp (add-transpose-api LLOBJ))
(define logtot-mmt (log2 (trp 'total-mmt-count)))
(define (marg-mmt WRD)
	(- (log2 (trp 'mmt-count WRD)) logtot-mmt))

(marg-mmt (Word "she")) ;; -8.132478192249291

(define smc (add-symmetric-mi-compute sha))
(log2 (smc 'mmt-marginal (Word "she"))) ; -8.132478192249287

(smc 'mmt-fmi (Word "she") (Word "he")) ; 3.717520907323397

(log2 (smc 'mmt-marginal (Word "he"))) ; -6.809712318531014

(* 0.5 (+ -8.132478192249287 -6.809712318531014)) ; -7.471095255390151

(* 0.5 11.945777087600217)  ; 5.972888543800108


OK Go for it, again
-------------------
(sap 'pair-count (Word "she") (Word "he"))

(length good-sims) ;; 1338

so out of 200*201/1 = 20K pairs, 1K have MI > 2 .. I guess that's allright

(ranked-mi-sim (Word "she") (Word "he"))

(define (prt-sorted-pairs LST N)
   (for-each
      (lambda (PR)
         (format #t "ranked-MI = ~6F MI = ~6F (`~A`, `~A`)\n"
            (ranked-mi-sim (gar PR) (gdr PR))
            (mi-sim (gar PR) (gdr PR))
            (cog-name (gar PR))
            (cog-name (gdr PR))))
      (drop (take LST (min (length LST) (+ N 20))) N)))


(smc 'mmt-fmi (Word "i") (Word "ii"))

(define (rank-of WRD)
	(list-index (lambda (W) (equal? WRD W)) ranked-words))

(define gsims
	(filter
		(lambda (SIM)
			(define WA (gar SIM))
			(define WB (gdr SIM))
			(and (< 6.0 (mi-sim WA WB)) (<= (mi-sim WA WB) 33.0)
				 (not (equal? WA WB))))
		all-sim-pairs))

(define rp (rank-pairs gsims
	(lambda (SIM) (ranked-mi-sim (gar SIM) (gdr SIM)))))

Where are the clusters??
(define sp (get-ranked-pairs sha 2))
(define cnt 0)
(for-each
	(lambda (SIM)
		(if (or (equal? (cog-type (gar SIM)) 'WordClassNode)
				(equal? (cog-type (gdr SIM)) 'WordClassNode))
			(set! cnt (+ cnt 1))))
	sp)

Dry run, fank first 100
-----------------------
Bugs in cluster naming.

almost monotonic but not quite

ranked-MI = 9.1620 MI = 5.0377 (`;`, `,`)
ranked-MI = 9.0605 MI = 4.6242 (`is`, `was`)
ranked-MI = 9.0319 MI = 4.8387 (`and`, `but`)
ranked-MI = 8.9357 MI = 5.8409 (`.`, `?`)
ranked-MI = 8.8665 MI = 4.9165 (`It`, `He`)
ranked-MI = 8.2227 MI = 5.2267 (`”`, `"`)
ranked-MI = 8.1951 MI = 4.4320 (`in`, `of`)
ranked-MI = 8.0408 MI = 4.5713 (`‘`, `“`)
ranked-MI = 7.9914 MI = 4.2834 (`the`, `his`)
ranked-MI = 7.7349 MI = 4.1172 (`###LEFT-WALL###`, `:`)
ranked-MI = 7.6428 MI = 5.2748 (`have`, `be`)
ranked-MI = 7.6143 MI = 4.5670 (`a`, `no`)
ranked-MI = 7.5651 MI = 5.2749 (`would`, `could`)
ranked-MI = 7.3664 MI = 5.7994 (`were`, `are`)
ranked-MI = 7.3611 MI = 4.2474 (`There`, `there`)
ranked-MI = 7.1519 MI = 4.7093 (`had`, `has`)
ranked-MI = 6.6920 MI = 4.4414 (`do`, `did`)
ranked-MI = 6.6489 MI = 4.4502 (`think`, `know`)
ranked-MI = 6.6097 MI = 4.8580 (`will`, `should`)
ranked-MI = 6.5414 MI = 4.2444 (`to`, `from`)
ranked-MI = 5.7621 MI = 4.5039 (`on`, `into`)
ranked-MI = 5.4821 MI = 4.1775 (`made`, `been`)
ranked-MI = 5.4418 MI = 4.6794 (`my`, `their`)
ranked-MI = 4.4436 MI = 4.5731 (`as`, `and but`)   <<<<< first cluster
ranked-MI = 4.3999 MI = 4.6014 (`:`, `; ,`)
ranked-MI = 3.6787 MI = 7.4757 (`!`, `. ?`)
ranked-MI = 3.0092 MI = 6.0101 (`in of`, `into`)
ranked-MI = 2.7972 MI = 4.4249 (`had`, `is was`)
ranked-MI = 2.2098 MI = 5.6060 (`for`, `and but`)
ranked-MI = 1.8936 MI = 4.6803 (`their`, `the his`)
ranked-MI = 1.7668 MI = 7.0720 (`;`, `,`)       <<<< same as very first!!
ranked-MI = 1.6940 MI = 4.0208 (`so`, `and but`)
ranked-MI = 1.5368 MI = 9.7911 (`It`, `There`)
ranked-MI = 1.4419 MI = 6.2566 (`the`, `a`)
ranked-MI = 1.4097 MI = 5.7577 (`her`, `his`)
ranked-MI = 1.2702 MI = 5.1342 (`not`, `but`)
ranked-MI = 1.2647 MI = 5.1246 (`”`, `’`)
ranked-MI = 1.1276 MI = 4.7510 (`.`, `of`)       <<<<<< First ugly
ranked-MI = 1.0498 MI = 4.4312 (`to from`, `on`)
ranked-MI = 1.0264 MI = 10.063 (`their`, `the a`)
ranked-MI = 1.0065 MI = 5.1528 (`a no`, `an`)
ranked-MI = 0.9819 MI = 4.9484 (`and`, `,`)
ranked-MI = 2.9491 MI = 9.6009 (`and`, `but`)  << we've done this before! NOT MONTOINC
ranked-MI = 0.9528 MI = 5.0434 (`_`, `‘ “`)
ranked-MI = 0.7646 MI = 11.141 (`had`, `has`)
ranked-MI = 0.7307 MI = 6.7386 (`at`, `from`)
ranked-MI = 0.7127 MI = 6.0925 (`and ,`, `or`)
ranked-MI = 0.4036 MI = 5.5641 (`see`, `have be`)
ranked-MI = 0.3620 MI = 5.9597 (`!`, `,`)
ranked-MI = 0.0722 MI = 4.0132 (`if`, `and but`)
ranked-MI = -0.102 MI = 6.1902 (`###LEFT-WALL### :`, `"`)
ranked-MI = -0.142 MI = 6.6770 (`not but`, `only`)
ranked-MI = -0.185 MI = 5.4569 (`There`, `It He`)
ranked-MI = -0.296 MI = 8.1413 (`|`, `. of`)
ranked-MI = -0.335 MI = 8.8529 (`at from`, `on`)
ranked-MI = -0.390 MI = 4.6509 (`in`, `to`)
ranked-MI = 0.7632 MI = 8.5437 (`to`, `could`)  << another inversion
ranked-MI = 0.6735 MI = 9.6363 (`in`, `into`)
ranked-MI = 0.6357 MI = 10.103 (`would`, `to could`)
ranked-MI = -0.401 MI = 5.7821 (`would could`, `should`)
ranked-MI = -0.605 MI = 5.5127 (`is was`, `did`)
ranked-MI = -0.632 MI = 4.1642 (`as`, `is`)








Data set construction
---------------------
(sha 'fetch-pairs)
Elapsed time to load csets: 175 secs
Elapsed time to load cross-sections: 0 seconds
(sha 'explode-sections)
Elapsed time to create shapes: 104 secs

(define bat (batch-transpose sha))
(bat 'mmt-marginals)
Finished left norm marginals in 3503 secs
Finished mmt norm marginals in 310 secs




The End
-------
